#!/bin/bash

# Help message.
usage() {
	cat <<- EndOfMessage
	ChangeMAC - Macchanger wrapper (2019 May 3) v0.6

	Makes it easier to change the MAC. Unite commands for 'macchanger' and 'ip link'/'netsh' (changing interface modes).

	Usage: sudo changemac [options] device

	Options:
	    -m, --mac <MAC>        MAC to use (Default: 0A:1B:2C:3D:4E:5F)
	    -p, --permanent              Reset MAC to default (permanent)
	    -r, --fully-random           Set fully random MAC
	    -a, --same-kind              Set random vendor MAC of the same kind
	    -A, --any-kind               Set random vendor MAC of any kind
	    -s, --service                Restart network-manager
	    -v, --verbose                Verbose output
	    -h, --help                   Show help information


	Report bugs to https://github.com/shvetsovdmitry/changemac/issues
	EndOfMessage
}


# Checking OS type (Windows/Unix)
check_os() {
	uname_out="$(uname -s)"
	case "${uname_out}" in
		Linux* ) SUDO="sudo";;
		Darwin* ) SUDO="sudo";;
		* ) SUDO="";;
	esac
	OS=$uname_out
}


# Checking installed utilities.
check_utils() {
	warning_output "Checking installed utilities.."
	macchanger_output="$($SUDO macchanger --version)"
	git_output="$(git --version)"
	if [[ -z "${macchanger_output}" ]]; then
		error_output "Macchanger is not installed. Quitting.."
		# exit 1
	else
		success_output ${macchanger_output}
	fi
	if [[ -z "${git_output}" ]]; then
		warning_output "Git is not installed. You will not be able to receive updates without git."
	else
		success_output "${git_output}"
	fi
}


# Checking device for availability.
check_device() {
	if [[ $OS == *"Linux"* ]] || [[ $OS == *"Darwin"* ]]; then
		ifc="$(sudo ifconfig $DEVICE)"
		if [[ ! ${ifc} == *"$DEVICE"* ]]; then
			error_output "Device $DEVICE not found! Quitting.."
			exit 1
		fi
	else
		DEVICE=${DEVICE%\"}
		DEVICE=${DEVICE##*\"}
		ipconfig > .ipc
		ipc="$(iconv -f CP866 -t UTF-8 < .ipc)"
		rm .ipc
		if [[ ! "${ipc}" == *$DEVICE* ]]; then
			error_output "Device $DEVICE not found! Quitting.."
			exit 1
		else
			success_output "Device $DEVICE found! Continuing job!"
		fi
	fi
}


# Checking updates from GitHUB.
check_for_updates() {
	SOURCE="${BASH_SOURCE[0]}"
	DIR="$(cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd)"
	warning_output "Checking for updates.."
	if [ -d "$DIR/.git/" ]; then
		status="$($SUDO git diff origin/master)"
		if [[ -z ${status} ]]; then
			success_output "You're using the latest version"
		else
			warning_output "Updating.."
			$SUDO git pull
			success_output "Succesfully updated."
		fi
	else
		warning_output "Not a git repo. You need to check and install updates manually."
	fi
}


# Everything is going fine.
success_output() {
	printf "[${GREEN}+${NC}] $1 \n"
	return 0
}


# Warning message.
warning_output() {
	printf "[${ORANGE}!${NC}] $1 \n"
	return 0
}


# Error message.
error_output() {
	printf "[${RED}-${NC}] $1 \n"
	return 0
}


# ON verbose mode.
set_verbose_mode_ON() {
	echo "Setting verbose mode ON"
	exec 2>&1
	return 0
}


# Manages the network interfaces.
manage_interface () {
	if [ $OS == *"Linux"* ] || [ $OS == *"Darwin"* ]; then
		if [ $1 == up ]; then
			sudo ip link set $DEVICE down
		elif [ $1 == down ]; then
			sudo ip link set $DEVICE
		fi
	else
		if [ $1 == up ]; then
			netsh interface set interface name="$DEVICE" admin=enable
		elif [ $1 == down ]; then
			netsh interface set interface name="$DEVICE" admin=disable
		fi
	fi
}



# Main function.
change_mac() {
	success_output "Setting network down."
	manage_interface down

	success_output "Changing MAC."
	# If VERBOSE mode OFF.
	if [ "$VERBOSE" = false ] ; then
		set_verbose_mode_off
	fi
	# Reset to permanent MAC.
	if $PERMANENT ; then
		warning_output "Reset to default MAC."
		$SUDO macchanger -p $DEVICE
		success_output "Reset to default MAC."
	# Randomize MAC address.
	elif $FULLY_RANDOM ; then
		warning_output "Setting fully random MAC.";
		$SUDO macchanger -r $DEVICE
		success_output "Randomized MAC."
	# Randomize vendor MAC of the same kind. 
	elif $RANDOM_SAME_KIND ; then
		warning_output "Setting random vendor MAC of the same kind."
		$SUDO macchanger -a $DEVICE
		success_output "Randomized vendor MAC of same kind."
	# Randomize vendor MAC of any kind.
	elif $RANDOM_ANY_KIND ; then
		warning_output "Setting random vendor MAC of any kind."
		$SUDO macchanger -A $DEVICE
		success_output "Randomized vendor MAC of any kind."
	# Using user defined MAC.
	else
		warning_output "Using MAC $MAC"
		$SUDO macchanger -m $MAC $DEVICE
		success_output "Succesfully changed MAC to $MAC."
	fi

	success_output "Setting network up."
	manage_interface up

	# If user want to restart service.
	if [ $RESTART_SERVICE ] && ([ $OS == *"Linux"* ] || [ $OS == *"Darwin"* ]) ; then
		warning_output "Network-manager restarting."
		$SUDO service network-manager restart
		success_output "Success!"
	fi
	success_output "Quitting..."

	return 0
}


#### Variables #################################################################

# Do we need to restart network-manager service?
RESTART_SERVICE=false
# Do we need to reset MAC to permanent?
PERMANENT=false
# Do we need a fully random MAC?
FULLY_RANDOM=false
# Random vendor MAC of the same kind.
RANDOM_SAME_KIND=false
# Random vendor MAC of any kind.
RANDOM_ANY_KIND=false
# Do we need to output macchanger's messages?
VERBOSE=false
# Red escape character.
RED='\033[0;31m'
# Green escape character.
GREEN='\033[0;32m'
# Orange escape character.
ORANGE='\033[0;33m'
NC='\033[0m'
# Default MAC.
MAC="0A:1B:2C:3D:4E:5F"

################################################################################

# Mute output.
exec 2>/dev/null

#### Passing arguments #########################################################
while [ -n "$1" ]; do
    # Copy $1 to modify it
    ARG="$1"
    # Detect argument termination
    if [ x"$ARG" = x"--" ]; then
        shift
        for ARG ; do
            REMAINS="$REMAINS \"$ARG\""
        done

        break
    fi
    # Parse current arguments
    while [ x"$ARG" != x"-" ] ; do
        case "$ARG" in
        	# Handle --flag=value args like this
            -m=* | --mac=* ) MAC="${ARG#*=}"; shift;;
            # and --flag value args like this
            -m* | --mac ) MAC="$2"; shift;;
            -p* | --permanent ) PERMANENT=true;;
            -r* | --fully-random ) FULLY_RANDOM=true;;
			-a* | --same-kind ) RANDOM_SAME_KIND=true;;
			-A* | --any-kind ) RANDOM_ANY_KIND=true;;
			-s* | --service ) RESTART_SERVICE=true;;
			-v* | --verbose ) VERBOSE=true;;
			-h* | --help ) usage; exit;;
            # Anything unknown is recorded for later
            * ) REMAINS="$REMAINS \"$ARG\""; break;;
        esac
	        # Check for multiple short arguments
	        # NOTICE: be sure to update this pattern to match valid ARGions
	        NEXTARG="${ARG#-[praAsv]}" # try removing single short ARG
	        if [ x"$ARG" != x"$NEXTARG" ] ; then
                ARG="-$NEXTARG"  # multiple short ARGs, keep going
	        else
                break  # long form, exit inner loop
	        fi
    done
    # Done with that param. move to next
    shift
done
# Set the non-parameters back into the positional parameters ($1 $2 ..)
eval set -- $REMAINS

################################################################################


if $VERBOSE; then
	set_verbose_mode_ON
fi


# In REMAINS should remain only device.
DEVICE=$REMAINS

# Checking type of OS.
check_os
# Checking if every utilities installed.
check_utils
# Checking if device available.
check_device
# Calling update function.
check_for_updates
# Calling the main function.
# change_mac
