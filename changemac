#!/bin/bash


# Help message.
usage() {
	cat <<- EndOfMessage
	ChangeMAC - Macchanger wrapper (2019 May 3) v0.5c

	Makes it easier to change the MAC. Unite commands for 'macchanger' and 'ip link' (changing interface modes).

	Usage: sudo changemac [options]

	Options:
	    -m <MAC>        MAC to use (Default: 0A:1B:2C:3D:4E:5F)
	    -d <device>     Device to use.
	    -p              Reset MAC to default (permanent)
	    -r              Set fully random MAC
	    -a              Set random vendor MAC of the same kind
	    -A              Set random vendor MAC of any kind
	    -s              Restart network-manager
	    -v              Verbose output
	    -h              Show help information

    https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
	Report bugs to https://github.com/shvetsovdmitry/changemac/issues
	EndOfMessage
}


init() {
	uname_out="$(uname -s)"
	case "${uname_out}" in
		Linux* ) SUDO="sudo";;
		Darwin* ) SUDO="sudo";;
		* ) SUDO="";;
	esac
	OS=$uname_out
	echo $OS
	# Do we need to restart network-manager service?
	restart_service=false
	# Do we need to reset MAC to permanent?
	reset_to_permanent=false
	# Do we need a fully random MAC?
	fully_random=false
	# Random vendor MAC of the same kind.
	random_same_kind=false
	# Random vendor MAC of any kind.
	random=false
	# Do we need to output macchanger's messages?
	verbose=false
	# Red escape character.
	RED='\033[0;31m'
	# Green escape character.
	GREEN='\033[0;32m'
	# Orange escape character.
	ORANGE='\033[0;33m'
	NC='\033[0m'
	# Default MAC.
	MAC="0A:1B:2C:3D:4E:5F"

}


check_for_updates() {
	warning_output "Checking for updates.."
	if [ -d .git/ ]; then
		status="$($SUDO git diff origin/master)"
		if [[ $status == *"Already up to date"* ]]; then
			success_output "You're using the latest version"
		else
			warning_output "Updating.."
			$SUDO git pull
			success_output "Succesfully updated."
		fi
	else
		warning_output "Not a git repo. You need to check and install updates manually."
	fi
}


# Everything is going fine.
success_output() {
	printf "[${GREEN}+${NC}] $1 \n"
	return 0
}


# Warning message.
warning_output() {
	printf "[${ORANGE}!${NC}] $1 \n"
	return 0
}


# Error message.
error_output() {
	printf "[${RED}-${NC}] $1 \n"
	return 0
}


# Off verbose mode.
set_verbose_mode_off() {
	exec 2>/dev/null
	return 0
}


# Manages the network interfaces.
manage_interface () {
	if [ $OS == *"Linux"* ] || [ $OS == *"Darwin"* ]; then
		if [ $1 == up ]; then
			sudo ip link set $DEVICE down
		elif [ $1 == down ]; then
			sudo ip link set $DEVICE
		fi
	else
		if [ $1 == up ]; then
			netsh interface set interface name="$DEVICE" admin=enable
		elif [ $1 == down ]; then
			netsh interface set interface name="$DEVICE" admin=disable
		fi
	fi
}



# Main function.
change_mac() {
	success_output "Setting network down."
	manage_interface down

	success_output "Changing MAC."
	# If VERBOSE mode OFF.
	if [ "$verbose" = false ] ; then
		set_verbose_mode_off
	fi
	# Reset to permanent MAC.
	if $reset_to_permanent ; then
		warning_output "Reset to default MAC."
		$SUDO macchanger -p $DEVICE
		success_output "Reset to default MAC."
	# Randomize MAC address.
	elif $fully_random ; then
		warning_output "Setting fully random MAC.";
		$SUDO macchanger -r $DEVICE
		success_output "Randomized MAC."
	# Randomize vendor MAC of the same kind. 
	elif $random_same_kind ; then
		warning_output "Setting random vendor MAC of the same kind."
		$SUDO macchanger -a $DEVICE
		success_output "Randomized vendor MAC of same kind."
	# Randomize vendor MAC of any kind.
	elif $random ; then
		warning_output "Setting random vendor MAC of any kind."
		$SUDO macchanger -A $DEVICE
		success_output "Randomized vendor MAC of any kind."
	# Using user defined MAC.
	else
		warning_output "Using MAC $MAC"
		$SUDO macchanger -m $MAC $DEVICE
		success_output "Succesfully changed MAC to $MAC."
	fi

	success_output "Setting network up."
	manage_interface up

	# If user want to restart service.
	if [ $restart_service ] && ([ $OS == *"Linux"* ] || [ $OS == *"Darwin"* ]) ; then
		warning_output "Network-manager restarting."
		$SUDO service network-manager restart
		success_output "Success!"
	fi
	success_output "Quitting..."

	return 0
}


# Assigning default variables
if ( ! getopts ":md:praAsvhq" opt); then
	warning_output "Using default MAC (0A:1B:2C:3D:4E:5F)"
fi

options=':md:praAsvhq'
while getopts $options option
do
	case $option in
		m ) MAC=$OPTARG;;
		d ) DEVICE=$OPTARG; warning_output "Using device $DEVICE";;
		p ) reset_to_permanent=true;;
		r ) fully_random=true;;
		a ) random_same_kind=true;;
		A ) random=true;;
		s ) restart_service=true;;
		v ) verbose=true;;
		h ) usage; exit;;
	esac
done




init
# Calling update functions
check_for_updates
# Calling the main function.
change_mac
