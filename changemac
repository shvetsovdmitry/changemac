#!/bin/bash

# Do we need to restart network-manager service?
restart_service=false
# Do we need to reset MAC to permanent?
reset_to_permanent=false
# Do we need a fully random MAC?
fully_random=false
# Random vendor MAC of the same kind.
random_same_kind=false
# Random vendor MAC of any kind.
random=false
# Do we need to output macchanger's messages?
verbose=false
# Red escape character.
RED='\033[0;31m'
# Green escape character.
GREEN='\033[0;32m'
# Orange escape character.
ORANGE='\033[0;33m'
NC='\033[0m'
# Default MAC.
MAC="0A:1B:2C:3D:4E:5F"
# Device.
DEVICE="wlan0"


# Help message.
usage() {
	printf "ChangeMAC - Macchanger wrapper (2019 May 3) v0.5a\n\n"
	printf "Makes it easier to change the MAC. Unite commands for 'macchanger' and 'ip link' (changing interface modes).\n\n"
	printf "Usage: sudo changemac [arguments]\tChange MAC for specified device\n"
	printf "   or: sudo changemac [arguments] -v\tVerbose output\n"
	printf "   or: sudo changemac -h\t\tShow help information\n\n"
	printf "Arguments:\n"
	printf "   -m <MAC>\tMAC to use (Default: 0A:1B:2C:3D:4E:5F) \n"
	printf "   -d <device>\tDevice to use (Default: wlan0) \n"
	printf "   -p\t\tReset MAC to default (permanent) \n"
	printf "   -r\t\tSet fully random MAC \n"
	printf "   -a\t\tSet random vendor MAC of the same kind \n"
	printf "   -A\t\tSet random vendor MAC of any kind \n"
	printf "   -s\t\tRestart network-manager \n"
	printf "   -v\t\tVerbose output \n"
	# printf "   -q\t\tQuiet mode \n"
	printf "   -h\t\tShow help information \n"
}


# Everything is going fine.
success_output() {
	printf "[${GREEN}+${NC}] $1 \n" 	
}


# Warning message.
warning_output() {
	printf "[${ORANGE}!${NC}] $1 \n"
}


# Error message.
error_output() {
	printf "[${RED}-${NC}] $1 \n"
}


# Main function.
change_mac() {
	success_output "Setting network down."
	sudo ip link set $DEVICE down

	success_output "Changing MAC."
	# If VERBOSE mode.
	if $verbose ; then
		warning_output "Verbose mode: ON"
		if $reset_to_permanent ; then
			sudo macchanger -p $DEVICE
			success_output "Reset to default MAC."
		elif $fully_random ; then
			sudo macchanger -r $DEVICE
			success_output "Randomized MAC."
		elif $random_same_kind ; then
			sudo macchanger -a $DEVICE
			success_output "Randomized vendor MAC of same kind."
		elif $random ; then
			sudo macchanger -A $DEVICE
			success_output "Randomized vendor MAC of any kind."
		else
			sudo macchanger -m $MAC $DEVICE
		fi
	# If Non-verbose mode.
	else
		if $reset_to_permanent ; then
			sudo macchanger -p $DEVICE >/dev/null 2>&1
			success_output "Reset to default MAC."
		elif $fully_random ; then
			sudo macchanger -r $DEVICE >/dev/null 2>&1
			success_output "Randomized MAC."
		elif $random_same_kind ; then
			sudo macchanger -a $DEVICE >/dev/null 2>&1
			success_output "Randomized vendor MAC of same kind."
		elif $random ; then
			sudo macchanger -A $DEVICE >/dev/null 2>&1
			success_output "Randomized vendor MAC of any kind."
		else
			sudo macchanger -m $MAC $DEVICE >/dev/null 2>&1
		fi
	fi

	success_output "Setting network up."
	sudo ip link set $DEVICE up

	if $restart_service ; then
		warning_output "Network-manager restarting."
		sudo service network-manager restart
		success_output "Success!"
	fi
	success_output "Quitting..."
}


# Assigning default variables
if ( ! getopts ":md:praAsvhq" opt); then
	warning_output "Using default MAC (0A:1B:2C:3D:4E:5F)"
fi

options=':md:praAsvhq'
while getopts $options option
do
	case $option in
		m ) MAC=$OPTARG; warning_output "Using MAC $MAC";;
		d ) DEVICE=$OPTARG; warning_output "Using device $DEVICE";;
		p ) reset_to_permanent=true; warning_output "Reset to default MAC.";;
		r ) fully_random=true; warning_output "Setting fully random MAC.";;
		a ) random_same_kind=true; warning_output "Setting random vendor MAC of the same kind.";;
		A ) random=true; warning_output "Setting random vendor MAC of any kind.";;
		s ) restart_service=true;;
		v ) verbose=true;;
		# q ) exec 3>/dev/null;;
		h ) usage; exit;;
	esac
done

# Calling the main function.
change_mac
